{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasdp\\\\Desktop\\\\MyProgrammingLab\\\\Commute Compass\\\\Commute Compass - React Version\\\\Commute Compass\\\\src\\\\autocomplete-classic.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useMapsLibrary } from '@vis.gl/react-google-maps';\n\n// This is an example of the classic \"Place Autocomplete\" widget.\n// https://developers.google.com/maps/documentation/javascript/place-autocomplete\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaceAutocompleteClassic = ({\n  onPlaceSelect,\n  currPos\n}) => {\n  _s();\n  const [placeAutocomplete, setPlaceAutocomplete] = useState();\n  const inputRef = useRef();\n  const places = useMapsLibrary('places');\n  const mapsLib = useMapsLibrary('maps');\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n    const options = {\n      fields: ['geometry', 'name', 'formatted_address']\n    };\n    setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));\n  }, [places]);\n  useEffect(() => {\n    if (!placeAutocomplete) return;\n    placeAutocomplete.addListener('place_changed', () => {\n      onPlaceSelect(placeAutocomplete.getPlace());\n    });\n    const bounds = new mapsLib.Circle({\n      center: currPos,\n      radius: 10000 // Adjust the radius as needed to cover a larger or smaller area\n    }).getBounds();\n    placeAutocomplete.setBounds(bounds);\n  }, [onPlaceSelect, placeAutocomplete, currPos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete-container\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceAutocompleteClassic, \"DPsaZ79XFHhpj9WoImGMGjdqlFM=\", false, function () {\n  return [useMapsLibrary, useMapsLibrary];\n});\n_c = PlaceAutocompleteClassic;\nvar _c;\n$RefreshReg$(_c, \"PlaceAutocompleteClassic\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMapsLibrary","jsxDEV","_jsxDEV","PlaceAutocompleteClassic","onPlaceSelect","currPos","_s","placeAutocomplete","setPlaceAutocomplete","inputRef","places","mapsLib","current","options","fields","Autocomplete","addListener","getPlace","bounds","Circle","center","radius","getBounds","setBounds","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/wasdp/Desktop/MyProgrammingLab/Commute Compass/Commute Compass - React Version/Commute Compass/src/autocomplete-classic.js"],"sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\r\nimport {useMapsLibrary} from '@vis.gl/react-google-maps';\r\n\r\n\r\n// This is an example of the classic \"Place Autocomplete\" widget.\r\n// https://developers.google.com/maps/documentation/javascript/place-autocomplete\r\nexport const PlaceAutocompleteClassic = ({ onPlaceSelect, currPos }) => {\r\n  const [placeAutocomplete, setPlaceAutocomplete] = useState();\r\n  const inputRef = useRef();\r\n  const places = useMapsLibrary('places');\r\n  const mapsLib = useMapsLibrary('maps');\r\n\r\n  useEffect(() => {\r\n    if (!places || !inputRef.current) return;\r\n\r\n    const options = {\r\n      fields: ['geometry', 'name', 'formatted_address']\r\n    };\r\n\r\n    setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));\r\n  }, [places]);\r\n\r\n  useEffect(() => {\r\n    if (!placeAutocomplete) return;\r\n\r\n    placeAutocomplete.addListener('place_changed', () => {\r\n      onPlaceSelect(placeAutocomplete.getPlace());\r\n    });\r\n\r\n    const bounds = new mapsLib.Circle({\r\n      center: currPos,\r\n      radius: 10000 // Adjust the radius as needed to cover a larger or smaller area\r\n    }).getBounds();\r\n\r\n    placeAutocomplete.setBounds(bounds);\r\n\r\n  }, [onPlaceSelect, placeAutocomplete, currPos]);\r\n\r\n  return (\r\n    <div className=\"autocomplete-container\">\r\n      <input ref={inputRef} />\r\n    </div>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,cAAc,QAAO,2BAA2B;;AAGxD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,wBAAwB,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAC5D,MAAMU,QAAQ,GAAGZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAGV,cAAc,CAAC,QAAQ,CAAC;EACvC,MAAMW,OAAO,GAAGX,cAAc,CAAC,MAAM,CAAC;EAEtCF,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,MAAM,IAAI,CAACD,QAAQ,CAACG,OAAO,EAAE;IAElC,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,mBAAmB;IAClD,CAAC;IAEDN,oBAAoB,CAAC,IAAIE,MAAM,CAACK,YAAY,CAACN,QAAQ,CAACG,OAAO,EAAEC,OAAO,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,iBAAiB,EAAE;IAExBA,iBAAiB,CAACS,WAAW,CAAC,eAAe,EAAE,MAAM;MACnDZ,aAAa,CAACG,iBAAiB,CAACU,QAAQ,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,IAAIP,OAAO,CAACQ,MAAM,CAAC;MAChCC,MAAM,EAAEf,OAAO;MACfgB,MAAM,EAAE,KAAK,CAAC;IAChB,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;IAEdf,iBAAiB,CAACgB,SAAS,CAACL,MAAM,CAAC;EAErC,CAAC,EAAE,CAACd,aAAa,EAAEG,iBAAiB,EAAEF,OAAO,CAAC,CAAC;EAE/C,oBACEH,OAAA;IAAKsB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACrCvB,OAAA;MAAOwB,GAAG,EAAEjB;IAAS;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACxB,EAAA,CArCWH,wBAAwB;EAAA,QAGpBH,cAAc,EACbA,cAAc;AAAA;AAAA+B,EAAA,GAJnB5B,wBAAwB;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}